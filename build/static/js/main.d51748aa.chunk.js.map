{"version":3,"sources":["components/Header.js","components/Select.js","tmdb-api.js","components/SearchForm.js","components/Cards.js","components/Movies.js","components/SearchResults.js","components/TabPanel.js","components/TVShows.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","useStyles","makeStyles","theme","formControl","marginLeft","spacing","minWidth","searchType","textAlign","Select","items","label","handleItemChange","onChange","selectedItem","setPage","classes","inputLabel","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","FormControl","variant","InputLabel","ref","id","labelId","value","event","target","map","item","MenuItem","key","get","endpoint","params","axios","process","then","res","data","catch","err","searchBox","width","searchBtn","alignSelf","SearchForm","handleSubmit","onSubmit","handleErr","onErr","page","setCurrentTab","searchKeyword","setSearchKeyword","type","setType","TextField","length","Button","color","onClick","encodeURI","console","log","container","margin","display","flexDirection","media","height","backgroundSize","mediaContent","Cards","mediaList","results","index","CardMedia","image","poster_path","title","Grid","direction","justify","align","CardContent","Typography","gutterBottom","component","original_title","original_name","release_date","popularity","overview","Pagination","count","total_pages","window","scrollTo","Movies","category","setCategory","movies","setMovies","SearchResults","searchResults","searchMsg","TabPanel","children","other","role","hidden","aria-labelledby","Box","p","TVShows","tvShows","setTvShows","root","flexGrow","backgroundColor","palette","background","paper","borderStyle","borderWidth","borderColor","selectedTab","primary","main","tabs","grey","Content","currentTab","AppBar","position","Tabs","aria-label","indicatorColor","newValue","tab","Tab","a11yProps","App","setSearchMsg","setSearchResults","Boolean","location","hostname","match","defaults","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d51748aa.chunk.js","sourcesContent":["import React from 'react'\nimport 'styles/Header.scss'\n\nconst Header = () => {\n\treturn (\n\t\t<header className=\"App-header\">\n\t\t\t<h1>React Movies App</h1>\n\t\t</header>\n\t)\n}\n\nexport default Header\n","// Core\nimport React, { useEffect, useRef, useState } from 'react'\n\n// MUI\nimport { makeStyles } from '@material-ui/core/styles'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport MUISelect from '@material-ui/core/Select'\n\n// MUI styles\nconst useStyles = makeStyles(theme => ({\n\tformControl: {\n\t\tmarginLeft: theme.spacing(1),\n\t\tminWidth: 200\n\t},\n\tsearchType: {\n\t\ttextAlign: 'center'\n\t}\n}))\n\nconst Select = ({ items, label, onChange: handleItemChange, selectedItem, setPage }) => {\n\t// Init\n\tconst classes = useStyles()\n\tconst inputLabel = useRef(null)\n\n\t// States\n\tconst [labelWidth, setLabelWidth] = useState(0)\n\n\t// Effects\n\tuseEffect(() => {\n\t\tsetLabelWidth(inputLabel.current.offsetWidth)\n\t}, [])\n\n\t// Component methods\n\tconst handleChange = event => {\n\t\thandleItemChange(event.target.value)\n\t\tsetPage(1)\n\t}\n\n\treturn (\n\t\t<FormControl variant=\"outlined\" className={classes.formControl}>\n\t\t\t<InputLabel ref={inputLabel} id=\"select-dd-label\">\n\t\t\t\t{label}\n\t\t\t</InputLabel>\n\t\t\t<MUISelect\n\t\t\t\tlabelId=\"select-dd-label\"\n\t\t\t\tid=\"select-dd\"\n\t\t\t\tclassName={classes.searchType}\n\t\t\t\tvalue={selectedItem}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tlabelWidth={labelWidth}\n\t\t\t>\n\t\t\t\t{items.map(item => (\n\t\t\t\t\t<MenuItem value={item} key={item}>\n\t\t\t\t\t\t{item}\n\t\t\t\t\t</MenuItem>\n\t\t\t\t))}\n\t\t\t</MUISelect>\n\t\t</FormControl>\n\t)\n}\n\nexport default Select\n","import axios from 'axios'\n\nconst get = (endpoint, params = '') =>\n\taxios\n\t\t.get(`${endpoint}?api_key=${process.env.REACT_APP_TMDB_API_KEY}${params}`)\n\t\t.then(res => res.data)\n\t\t.catch(err => err)\n\nexport { get }\n","// Core\nimport React, { useState } from 'react'\n\n// MUI\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport FormControl from '@material-ui/core/FormControl'\nimport TextField from '@material-ui/core/TextField'\n\n// Components\nimport Select from 'components/Select'\n\n// Services\nimport { get } from 'tmdb-api.js'\n\n// Styles\nimport 'styles/SearchForm.scss'\n\n// MUI styles\nconst useStyles = makeStyles(theme => ({\n\tformControl: {\n\t\tmarginLeft: theme.spacing(1),\n\t\tminWidth: 200\n\t},\n\tsearchBox: {\n\t\twidth: 400\n\t},\n\tsearchBtn: {\n\t\tminWidth: 'unset',\n\t\talignSelf: 'center'\n\t}\n}))\n\nconst SearchForm = ({ onSubmit: handleSubmit, onErr: handleErr, page, setCurrentTab, setPage }) => {\n\t// Init\n\tconst classes = useStyles()\n\tconst searchTypes = ['multi', 'movie', 'tv']\n\n\t// States\n\tconst [searchKeyword, setSearchKeyword] = useState('')\n\tconst [type, setType] = useState('multi')\n\n\tconst handleChange = event => {\n\t\tsetSearchKeyword(event.target.value)\n\t\tif (event.target.value.length > 0) handleErr('Please initiate a Search')\n\t\telse handleErr('Please enter a Search')\n\t}\n\n\tconst search = () => {\n\t\tif (searchKeyword.length === 0) handleErr('Please enter a Search')\n\t\telse {\n\t\t\tget(`search/${type}`, `&query=${encodeURI(searchKeyword)}&page=${page}`)\n\t\t\t\t.then(res => {\n\t\t\t\t\thandleSubmit(res)\n\t\t\t\t\tif (res.length === 0) handleErr('Sorry, there were no results')\n\t\t\t\t\telse {\n\t\t\t\t\t\thandleErr('')\n\t\t\t\t\t\tsetPage(res.page)\n\t\t\t\t\t\tsetCurrentTab(1)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(err => console.log(err))\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"search-form\">\n\t\t\t{/* Search box */}\n\t\t\t<FormControl className={[classes.formControl, classes.searchBox]}>\n\t\t\t\t<TextField\n\t\t\t\t\tid=\"search-keywords\"\n\t\t\t\t\tlabel=\"Search\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tvalue={searchKeyword}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\n\t\t\t{/* Search Type dropdown */}\n\t\t\t<Select items={searchTypes} label=\"Search Type\" onChange={setType} setPage={setPage} selectedItem={type} />\n\n\t\t\t{/* Search Button */}\n\t\t\t<FormControl className={[classes.formControl, classes.searchBtn]}>\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={search}>\n\t\t\t\t\tSearch\n\t\t\t\t</Button>\n\t\t\t</FormControl>\n\t\t</div>\n\t)\n}\n\nexport default SearchForm\n","// Core\nimport React from 'react'\n\n// MUI\nimport { makeStyles } from '@material-ui/core/styles'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Grid from '@material-ui/core/Grid'\nimport MUICard from '@material-ui/core/Card'\nimport Pagination from '@material-ui/lab/Pagination'\nimport Typography from '@material-ui/core/Typography'\n\n// MUI Styles\nconst useStyles = makeStyles({\n\tcontainer: {\n\t\tmargin: '1rem 3rem',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\tminWidth: 200,\n\t\theight: 300,\n\t\tbackgroundSize: 'contain'\n\t},\n\tmediaContent: {\n\t\ttextAlign: 'center'\n\t}\n})\n\nconst Cards = ({ mediaList, page, setPage }) => {\n\t// Init\n\tconst classes = useStyles()\n\tconsole.log(mediaList)\n\n\t// Component methods\n\tconst handleChange = (event, value) => {\n\t\tsetPage(value)\n\t\twindow.scrollTo(0, 0)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{mediaList.results &&\n\t\t\t\tmediaList.results.map((media, index) => (\n\t\t\t\t\t<MUICard className={classes.container} key={index}>\n\t\t\t\t\t\t<CardMedia\n\t\t\t\t\t\t\tclassName={classes.media}\n\t\t\t\t\t\t\timage={`${process.env.REACT_APP_TMDB_POSTER_BASE_URL}${media.poster_path}`}\n\t\t\t\t\t\t\ttitle=\"Poster\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Grid container direction=\"column\" justify=\"center\" align=\"center\">\n\t\t\t\t\t\t\t<CardContent className={classes.mediaContent}>\n\t\t\t\t\t\t\t\t<Typography gutterBottom variant=\"h5\" component=\"h2\">\n\t\t\t\t\t\t\t\t\t{media.original_title || media.original_name}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t\t\t\t\tRelease Date: {media.release_date || 'undefined'} | Popularity: {media.popularity}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<Typography align=\"left\" variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t\t\t\t\t{media.overview}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</MUICard>\n\t\t\t\t))}\n\t\t\t<Grid container justify=\"center\">\n\t\t\t\t<Pagination count={mediaList.total_pages} page={page} onChange={handleChange} />\n\t\t\t</Grid>\n\t\t</>\n\t)\n}\n\nexport default Cards\n","// Core\nimport React, { useEffect, useState } from 'react'\n\n// MUI\nimport Grid from '@material-ui/core/Grid'\n\n// Components\nimport Select from 'components/Select'\nimport Cards from 'components/Cards'\n\n// Styles\nimport 'styles/Movies.scss'\n\n// Services\nimport { get } from 'tmdb-api'\n\nconst Movies = ({ page, setPage }) => {\n\t// Init\n\tconst categories = ['now_playing', 'popular', 'top_rated', 'upcoming']\n\n\t// States\n\tconst [category, setCategory] = useState('popular')\n\tconst [movies, setMovies] = useState({})\n\n\t// Effects\n\tuseEffect(() => {\n\t\tget(`movie/${category}`, `&page=${page}`)\n\t\t\t.then(res => {\n\t\t\t\tconsole.log('Movies', res)\n\t\t\t\tsetMovies(res)\n\t\t\t\tsetPage(res.page)\n\t\t\t})\n\t\t\t.catch(err => console.log(err))\n\t}, [category, page, setPage])\n\n\treturn (\n\t\t<>\n\t\t\t<Grid className=\"movies-tab-categories\" container direction=\"row\" justify=\"center\">\n\t\t\t\t<Select items={categories} label=\"Category\" onChange={setCategory} selectedItem={category} setPage={setPage} />\n\t\t\t</Grid>\n\t\t\t<Grid container direction=\"column\">\n\t\t\t\t<Cards mediaList={movies} page={page} setPage={setPage} />\n\t\t\t</Grid>\n\t\t</>\n\t)\n}\n\nexport default Movies\n","// Core\nimport React from 'react'\n\n// MUI\nimport Grid from '@material-ui/core/Grid'\n\n// Components\nimport Cards from 'components/Cards'\n\nconst SearchResults = ({ page, setPage, searchResults, searchMsg }) => {\n\treturn searchMsg.length === 0 ? (\n\t\t<Grid container direction=\"column\">\n\t\t\t<Cards mediaList={searchResults} page={page} setPage={setPage} />\n\t\t</Grid>\n\t) : (\n\t\t<Grid container direction=\"row\" justify=\"center\">\n\t\t\t<h2>{searchMsg}</h2>\n\t\t</Grid>\n\t)\n}\nexport default SearchResults\n","// Core\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n// MUI\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nconst TabPanel = ({ children, value, index, ...other }) => (\n\t<Typography\n\t\tcomponent=\"div\"\n\t\trole=\"tabpanel\"\n\t\thidden={value !== index}\n\t\tid={`simple-tabpanel-${index}`}\n\t\taria-labelledby={`simple-tab-${index}`}\n\t\t{...other}\n\t>\n\t\t{value === index && <Box p={3}>{children}</Box>}\n\t</Typography>\n)\n\nTabPanel.propTypes = {\n\tchildren: PropTypes.node,\n\tindex: PropTypes.any.isRequired,\n\tvalue: PropTypes.any.isRequired\n}\n\nexport default TabPanel\n","// Core\nimport React, { useEffect, useState } from 'react'\n\n// MUI\nimport Grid from '@material-ui/core/Grid'\n\n// Components\nimport Select from 'components/Select'\nimport Cards from 'components/Cards'\n\n// Styles\nimport 'styles/TVShows.scss'\n\n// Services\nimport { get } from 'tmdb-api'\n\nconst TVShows = ({ page, setPage }) => {\n\t// Init\n\tconst categories = ['airing_today', 'on_the_air', 'popular', 'top_rated']\n\tconst [tvShows, setTvShows] = useState({})\n\n\t// States\n\tconst [category, setCategory] = useState('top_rated')\n\n\t// Effects\n\tuseEffect(() => {\n\t\tget(`tv/${category}`, `&page=${page}`)\n\t\t\t.then(res => {\n\t\t\t\tsetTvShows(res)\n\t\t\t\tsetPage(res.page)\n\t\t\t})\n\t\t\t.catch(err => console.log(err))\n\t}, [category, page, setPage])\n\n\treturn (\n\t\t<>\n\t\t\t<Grid className=\"tv-tab-content\" container direction=\"row\" justify=\"center\">\n\t\t\t\t<Select items={categories} label=\"Category\" onChange={setCategory} selectedItem={category} setPage={setPage} />\n\t\t\t</Grid>\n\t\t\t<Grid container direction=\"column\">\n\t\t\t\t<Cards mediaList={tvShows} page={page} setPage={setPage} />\n\t\t\t</Grid>\n\t\t</>\n\t)\n}\n\nexport default TVShows\n","// Core\nimport React from 'react'\n\n// MUI\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tab from '@material-ui/core/Tab'\nimport Tabs from '@material-ui/core/Tabs'\n\n// Components\nimport Movies from 'components/Movies'\nimport SearchResults from 'components/SearchResults'\nimport TabPanel from 'components/TabPanel'\nimport TVShows from 'components/TVShows'\n\n// MUI styles\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\tflexGrow: 1,\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tborderStyle: 'solid',\n\t\tborderWidth: 1,\n\t\tborderColor: 'black'\n\t},\n\tselectedTab: {\n\t\tcolor: theme.palette.primary.main\n\t},\n\ttabs: {\n\t\tbackgroundColor: theme.palette.grey['50'],\n\t\tcolor: theme.palette.grey['600']\n\t}\n}))\n\n// Generate props for the Tabs\nconst a11yProps = index => ({ id: `simple-tab-${index}`, 'aria-controls': `simple-tabpanel-${index}` })\n\nconst Content = ({ currentTab, page, setPage, searchResults, searchMsg, setCurrentTab }) => {\n\t// Init\n\tconst classes = useStyles()\n\tconst tabs = [\n\t\t{ key: 'movies', display: 'Movies' },\n\t\t{ key: 'search', display: 'Search Results' },\n\t\t{ key: 'tv', display: 'TV Shows' }\n\t]\n\n\t// Component methods\n\tconst handleChange = (event, newValue) => {\n\t\tsetCurrentTab(newValue)\n\t\tsetPage(1)\n\t}\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<AppBar position=\"static\">\n\t\t\t\t<Tabs\n\t\t\t\t\taria-label=\"simple tabs example\"\n\t\t\t\t\tclassName={classes.tabs}\n\t\t\t\t\tindicatorColor=\"primary\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tvalue={currentTab}\n\t\t\t\t\tvariant=\"fullWidth\"\n\t\t\t\t>\n\t\t\t\t\t{tabs.map((tab, index) => (\n\t\t\t\t\t\t<Tab\n\t\t\t\t\t\t\tclassName={index === currentTab && classes.selectedTab}\n\t\t\t\t\t\t\tkey={tab.key}\n\t\t\t\t\t\t\tlabel={tab.display}\n\t\t\t\t\t\t\t{...a11yProps(tab.key)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</Tabs>\n\t\t\t</AppBar>\n\t\t\t<TabPanel value={currentTab} index={0}>\n\t\t\t\t<Movies page={page} setPage={setPage} />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={currentTab} index={1}>\n\t\t\t\t<SearchResults page={page} setPage={setPage} searchResults={searchResults} searchMsg={searchMsg} />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={currentTab} index={2}>\n\t\t\t\t<TVShows page={page} setPage={setPage} />\n\t\t\t</TabPanel>\n\t\t</div>\n\t)\n}\n\nexport default Content\n","// Core\nimport React, { useState } from 'react'\n\n// Components\nimport Header from 'components/Header'\nimport SearchForm from 'components/SearchForm'\nimport Content from 'components/Content'\n\n// Style imports\nimport 'styles/App.scss'\n\nfunction App() {\n\t// States (These states have to be here as the Search Results will be passed from SearchForm to the children on Content)\n\tconst [currentTab, setCurrentTab] = useState(0)\n\tconst [searchMsg, setSearchMsg] = useState('Please enter a search')\n\tconst [searchResults, setSearchResults] = useState({})\n\tconst [page, setPage] = useState(1)\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header />\n\t\t\t<SearchForm\n\t\t\t\tonSubmit={setSearchResults}\n\t\t\t\tonErr={setSearchMsg}\n\t\t\t\tpage={page}\n\t\t\t\tsetCurrentTab={setCurrentTab}\n\t\t\t\tsetPage={setPage}\n\t\t\t/>\n\t\t\t<Content\n\t\t\t\tcurrentTab={currentTab}\n\t\t\t\tpage={page}\n\t\t\t\tsetPage={setPage}\n\t\t\t\tsearchMsg={searchMsg}\n\t\t\t\tsearchResults={searchResults}\n\t\t\t\tsetCurrentTab={setCurrentTab}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from 'App'\nimport * as serviceWorker from './serviceWorker'\nimport axios from 'axios'\n\naxios.defaults.baseURL = process.env.REACT_APP_TMDB_BASE_URL\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}